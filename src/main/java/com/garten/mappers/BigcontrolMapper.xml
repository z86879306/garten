<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.garten.dao.BigcontrolDao">
	
	<select id="findWorkerByPwd"  resultType="WorkerInfo">
		SELECT * FROM worker＿info  w
		where phoneNumber=#{phoneNumber} 
		and pwd=#{pwd}
		and job='总管理员'
		and w.isValid=0
	</select>
	
	
	
	<select id="findParentInfoCharge"  resultType="ParentInfoCharge">
		SELECT  p.babyId,
	  p.identity,
	  p.parentName,
	  p.phoneNumber,
	  p.parentHead,
	  p.address,
	  p.parentId,
	  p.pwd,
	  p.monitorTime,
	  p.attendanceTime,
	  p.flower,
	 p.token,
	  p.tokenTime,
	  p.registTime,
	 p.gartenId,
	b.babyId mainBabyId
	 FROM baby_info  b join parent_info p on b.parentId=p.parentId
		where 
		b.gartenId=#{gartenId}
		and b.parentId is not null
		and b.isValid=0 and p.isValid=0
	</select>
	
	<select id="findWorkerByToken"  resultType="WorkerInfo">
		SELECT * FROM worker＿info  w
		where token=#{token}
		and job='总管理员'
		and w.isValid=0
	</select>
	
	<select id="findOrder"  resultType="OrderAll">
		SELECT * FROM torder  o
		join garten_info g on o.gartenId=g.gartenId
		where 
		 o.isValid=0 
		 <if test=" state!=null and state!=''  or state==0">
		 	and o.state=#{state}
		 </if>
		 <if test=" type!=null and type!='' ">
		 	and o.type=#{type}
		 </if>
		 <if test=" gartenId!=null and gartenId!='' ">
		 	and o.gartenId=#{gartenId}
		 </if>
		 <if test=" province!=null and province!='' ">
		 	and g.province=#{province}
		 </if>
		 <if test=" city!=null and city!='' ">
		 	and g.city=#{city}
		 </if>
		 <if test=" countries!=null and countries!='' ">
		 	and g.countries=#{countries}
		 </if>
		  <if test=" orderDetail!=null and orderDetail!='' ">
		 	and o.orderDetail like '%${orderDetail}%'
		 </if>
		 and UNIX_TIMESTAMP(o.orderTime) > #{startTime}-1
		 and #{endTime}+86400>UNIX_TIMESTAMP(o.orderTime) 
		 order by o.orderTime desc
	</select>

	
	<select id="findFeedback"  resultType="FeedbackDetail">
		SELECT * FROM feedback  b
		left join garten_info g on g.gartenId=b.gartenId
		where 
		 b.isValid=0 order by b.time desc
	</select>
	
	<select id="fingMaxGartenId"  resultType="Integer">
		select max(gartenId) from garten_info where isvalid=0;
	</select>
	
	<select id="fingMaxJobId"  resultType="Integer">
		select max(jobId) from attendance_no where isvalid=0 ;
	</select>
	
	
	<select id="findGartens"  resultType="GartenInfo">
		SELECT * FROM garten_info  g
		where  g.isValid=0
	</select>
	
	<resultMap id="WorkerMessageMap" type="WorkerMessage" >
<collection property="gartenClasses" ofType="GartenClass" javaType="ArrayList" column="classId" select="findTeacherByTokenWithGartenClass"/>
</resultMap>
<select parameterType="String" resultType="GartenClass" id="findTeacherByTokenWithGartenClass">   
 select * from garten_class where find_in_set(classId,#{classId})
  </select>  
	<select id="findWorkerMessage"  resultMap="WorkerMessageMap">
		SELECT 	* FROM
			worker＿info w
		left join garten_info g on g.gartenId=w.gartenId
		left join garten_class c on w.classId=c.classId
		where
		 w.job not in ('总管理员','园长')
		and  (w.isvalid=0 or w.isvalid is null)
		 and  (g.isvalid=0 or g.isvalid is null)
		<if test="	name!=null and name!=''" >
				and w.workerName=#{name}
			</if>
			<if test="	phoneNumber!=null and phoneNumber!=''" >
				and w.phoneNumber=#{phoneNumber}
			</if>
			<if test="	province!=null and province!=''" >
				and g.province=#{province}
			</if>
			<if test="	city!=null and city!=''" >
				and g.city=#{city}
			</if>
			<if test="	countries!=null and countries!=''" >
				and g.countries=#{countries}
			</if>
			<if test="	gartenId!=null and gartenId!=''" >
				and g.gartenId=#{gartenId}
			</if>
	</select>
	
	<select id="findGartenMessage"  resultType="GartenAndAgent">
		SELECT 	* FROM
			garten_info g 
		where
		  g.isvalid=0
		<if test="	name!=null and name!=''" >
				and g.gartenName=#{name}
			</if>
			<if test="	phoneNumber!=null and phoneNumber!=''" >
				and g.phoneNumber=#{phoneNumber}
			</if>
			<if test="	province!=null and province!=''" >
				and g.province=#{province}
			</if>
			<if test="	city!=null and city!=''" >
				and g.city=#{city}
			</if>
			<if test="	countries!=null and countries!=''" >
				and g.countries=#{countries}
			</if>
			<if test="	gartenId!=null and gartenId!=''" >
				and g.gartenId=#{gartenId}
			</if>
			<if test="	monitorState==0" >
				and g.monitorTime &lt; now()
			</if>
			<if test="	monitorState==1" >
				and g.monitorTime > now()
			</if>
			<if test="	attendanceState==0" >
					and g.attendanceTime &lt; now()
			</if>
			<if test="	attendanceState==1" >
				and g.attendanceTime > now()
			</if>
	</select>
	
	
	<!--大改  -->
	<select id="findBabyByIdBig"  resultType="ClassManageBig">
		SELECT  b.babyName,b.babyId,b.birthday, b.height,
	 b.health,b.hobby,b.specialty,b.gartenId,c.classId, b.babyHead, b.allergy,
	b.weight,b.sex,b.registTime,c.leadClass,c.leadGrade 
	FROM
		baby_info b 
		left join garten_class c on  c.classId=b.classId 
		WHERE
		b.babyId = #{babyId}
		AND (b.isValid = 0 or  b.isValid is null)
		group by b.babyId
	</select>
	
	
	<select id="findAgentAudit"  resultType="AgentAuditMessage">
		SELECT  * from agent_audit  a 
		left join agent_info ai on a.resourceId=ai.agentId
		where resource=#{resource} and a.isvalid=0 and a.state=0
	</select>
	
	<select id="findAgentAuditOne"  resultType="AgentAudit">
		SELECT  * from agent_audit where auditId=#{auditId} and isvalid=0
	</select>
	
	<select id="agentPerformance"  resultType="AgentAuditDetail">
		SELECT  * from agent_audit  a where 
		resource=1
		<if test="	agentId!=null and agentId!=''" >
				and a.resourceId=#{agentId}
			</if>
			
			<if test="	province!=null and province!=''" >
				and a.province=#{province}
			</if>
			<if test="	city!=null and city!=''" >
				and a.city=#{city}
			</if>
			<if test="	countries!=null and countries!=''" >
				and a.countries=#{countries}
			</if>
			<if test="	state!=null and state!=''" >
				and a.state=#{state}
			</if>
			
	</select>
	
	<select id="findEmployeePerformance" resultType="AgentAuditDetail">
		select * from agent_audit a 
		left join employee e on e.employeeNo=a.resourceId
		where
		a.resource=0
		<if test=" departmentNo!=null and departmentNo!='' ">
			and e.departmentNo=#{departmentNo}
		</if>
		<if test=" jobsNo!=null and jobsNo!='' ">
			and e.jobsNo=#{jobsNo}
		</if>
		<if test=" employeeNo!=null and employeeNo!='' ">
			and e.employeeNo=#{employeeNo}
		</if>		
	</select>
	
	
	<select id="findParentMessage"  resultType="ParentInfo">
		SELECT * FROM parent_info  p 
		left join garten_info g on   g.gartenId=substring_index(p.gartenId,',', 1)
		where  (p.isValid=0 or p.isvalid is null)  and (g.isvalid=0  or g.isvalid is null)
		and (p.babyId!='' or p.babyId!=null)
		<if test="	name!=null and name!=''" >
				and p.parentName=#{name}
			</if>
			<if test="	phoneNumber!=null and phoneNumber!=''" >
				and p.phoneNumber=#{phoneNumber}
			</if>
			<if test="	province!=null and province!=''" >
				and g.province=#{province}
			</if>
			<if test="	city!=null and city!=''" >
				and g.city=#{city}
			</if>
			<if test="	countries!=null and countries!=''" >
				and g.countries=#{countries}
			</if>
			<if test="	gartenId!=null and gartenId!=''" >
				and g.gartenId=#{gartenId}
			</if>
			<if test=" pageNo!=null and pageNo!='' or pageNo==0 ">
				limit #{pageNo},16
			</if>
			
	</select>
	
	<select id="findParentMessageCount"  resultType="Integer">
		SELECT count(1) FROM parent_info  p 
		left join garten_info g on   g.gartenId=substring_index(p.gartenId,',', 1)
		where  (p.isValid=0 or p.isvalid is null)  and (g.isvalid=0  or g.isvalid is null)
		and (p.babyId!='' or p.babyId!=null)
		<if test="	name!=null and name!=''" >
				and p.parentName=#{name}
			</if>
			<if test="	phoneNumber!=null and phoneNumber!=''" >
				and p.phoneNumber=#{phoneNumber}
			</if>
			<if test="	province!=null and province!=''" >
				and g.province=#{province}
			</if>
			<if test="	city!=null and city!=''" >
				and g.city=#{city}
			</if>
			<if test="	countries!=null and countries!=''" >
				and g.countries=#{countries}
			</if>
			<if test="	gartenId!=null and gartenId!=''" >
				and g.gartenId=#{gartenId}
			</if>
			
	</select>
	<select id="findBabyMessage"  resultType="BabyMessageAndParent">
		SELECT * FROM 
		baby_info  b 
		left join  parent_info p on   FIND_IN_SET(b.babyId,p.babyId)
		left join  garten_class c on b.classId=c.classId
		left join  attendance_no n on n.jobId=b.babyId and n.job='宝宝'
		left join  garten_info g on   g.gartenId =b.gartenId
		where  (b.isValid=0 or b.isvalid is null) 
		and (n.isvalid=0 or n.isvalid is null)and (g.isvalid=0 or g.isvalid is null)
		
		<if test="	name!=null and name!=''" >
				and b.babyName=#{name}
			</if>
			
			<if test="	province!=null and province!=''" >
				and g.province=#{province}
			</if>
			<if test="	city!=null and city!=''" >
				and g.city=#{city}
			</if>
			<if test="	countries!=null and countries!=''" >
				and g.countries=#{countries}
			</if>
			<if test="	gartenId!=null and gartenId!=''" >
				and g.gartenId=#{gartenId}
			</if>
			<if test="	gradeId!=null and gradeId!=''" >
				and c.gradeId=#{gradeId}
			</if>
			<if test="	classId!=null and classId!=''" >
				and c.classId=#{classId}
			</if>
			group by b.babyId
			
	</select>
	
	
	<select id="findCheckLong"  resultType="Long">
		SELECT UNIX_TIMESTAMP(r.time)
		FROM  ignore_time r
		WHERE
			 r.gartenId = #{gartenId}
    	and r.isValid=0 
	</select>
	
		<select id="gartenCharge"  resultType="GartenCharge">
		SELECT *
		FROM  garten_charge c
		WHERE
    	 c.isValid=0 
			<if test="	province!=null and province!=''" >
				and c.province=#{province}
			</if>
			<if test="	city!=null and city!=''" >
				and c.city=#{city}
			</if>
			<if test="	countries!=null and countries!=''" >
				and c.countries=#{countries}
			</if>
			<if test="	gartenId!=null and gartenId!=''" >
				and c.gartenId=#{gartenId}
			</if>
			<if test="	type!=null " >
				and c.type=#{type}
			</if>
	</select>
	
	
	
	
	<select id="gartenChargeOne"  resultType="GartenCharge">
		SELECT *
		FROM  garten_charge c
		WHERE
    	 c.isValid=0 
				and c.province=#{province}
				and c.city=#{city}
				and c.countries=#{countries}
				and c.gartenId=#{gartenId}
				and c.type=#{type}
	</select>
	
	<select id="findGartenGrade"  resultType="String">
		SELECT c.leadGrade from garten_class c
		WHERE
			 c.gartenId = #{gartenId}
    	group by c.leadGrade
	</select>
	
	<select id="findGartenClasses"  resultType="GartenClass">
		SELECT * from garten_class c
		WHERE
			 c.gartenId = #{gartenId}
			 and c.leadGrade=#{leadGrade}
    	group by c.leadClass
	</select>
	
	
	
	<select id="findAgentMessge"  resultType="AgentInfo">
		SELECT * from agent_info i WHERE i.isValid=0 
		<if test="	province!=null and province!=''" >
				and i.province=#{province}
			</if>
			<if test="	city!=null and city!=''" >
				and i.city=#{city}
			</if>
			
			<if test="	countries!=null and countries!=''" >
				and i.countries=#{countries}
			</if>
			<if test="	agentId!=null and agentId!=''" >
				and i.agentId=#{agentId}
			</if>
			<if test="	parentAgentId!=null and parentAgentId!=''" >
				and i.agentId not in (${parentAgentId})
			</if>
	</select>

	
	
	<select id="findAgentMessgeOne"  resultType="AgentInfo">
		SELECT * from agent_info i WHERE i.isValid=0 
				and i.province=#{province}
				and i.city=#{city}
				and i.countries=#{countries}
	</select>
	
	<select id="findAgentName"  resultType="AgentInfo">
		SELECT * from agent_info i WHERE i.isValid=0 
		<if test="	province!=null and province!=''" >
				and i.province=#{province}
			</if>
			<if test="	city!=null and city!=''" >
				and i.city=#{city}
			</if>
			
			<if test="	countries!=null and countries!=''" >
				and i.countries=#{countries}
			</if>
	</select>
	
	<select id="getAllGarten" resultType="GartenInfo">
		select * from garten_info
	</select>
	<!--大改  -->
	<select id="findBabyCheckByToken"  resultType="BabyCheckLogAll">
		SELECT *		FROM
		baby_info b LEFT JOIN baby_check_log c on b.babyId=c.babyId
		LEFT JOIN `worker＿info` w ON FIND_IN_SET(b.classId, w.classId)
		WHERE
		w.gartenId = #{gartenId}
		and UNIX_TIMESTAMP(c.time)=#{time}    
		and b.isValid=0 
		group by b.babyId
	</select>
	
	
	<select id="findWorkerByAccount"  resultType="WorkerInfo">
		SELECT * FROM worker＿info  w
		where phoneNumber=#{phoneNumber} 
		and job='总管理员'
		and w.isValid=0
	</select>
	
	
	<select id="addtongjiBaby"  resultType="Integer">
		select count(1)  from baby_info  b where UNIX_TIMESTAMP(b.registTime)>#{start} and b.isvalid=0
	and  #{end}+86400>UNIX_TIMESTAMP(b.registTime)
	</select>
	
	<select id="addtongjiWorker"  resultType="Integer">
		select count(1)  from worker＿info  w where UNIX_TIMESTAMP(w.registTime)>#{start} and w.isvalid=0
	and  #{end}+86400>UNIX_TIMESTAMP(w.registTime)
	</select>
	
	<select id="addtongjiParent"  resultType="Integer">
		select count(1)  from parent_info  p where UNIX_TIMESTAMP(p.registTime)>#{start} and p.isvalid=0
		and  #{end}+86400>UNIX_TIMESTAMP(p.registTime)
	</select>
	
	
	
	<select id="deletetongjiBaby"  resultType="Integer">
		select count(1)  from baby_info  b where UNIX_TIMESTAMP(b.registTime)>#{start} and b.isvalid=1
			and  #{end}+86400>UNIX_TIMESTAMP(b.registTime)
	</select>
	<select id="deletetongjiWorker"  resultType="Integer">
		select count(1)  from worker＿info  w where UNIX_TIMESTAMP(w.registTime)>#{start} and w.isvalid=1
			and  #{end}+86400>UNIX_TIMESTAMP(w.registTime)
	</select>
	<select id="deletetongjiParent"  resultType="Integer">
		select count(1)  from parent_info  p where UNIX_TIMESTAMP(p.registTime)>#{start} and p.isvalid=1
			and  #{end}+86400>UNIX_TIMESTAMP(p.registTime)
	</select>
	
	
	<select id="adddetailBaby"  resultType="AddDetail">
		SELECT
		g.gartenName gartenName,g.province province,g.city city,g.countries countries,g.address address,'宝宝' type,b.babyName name,b.registTime registTime
		FROM
			baby_info b,
			garten_info g
		WHERE
			UNIX_TIMESTAMP(b.registTime) > #{start}-1
			and #{end}+86400>UNIX_TIMESTAMP(b.registTime) 
			<if test="	province!=null and province!=''" >
				and g.province=#{province}
			</if>
			<if test="	city!=null and city!=''" >
				and g.city=#{city}
			</if>
			<if test="	countries!=null and countries!=''" >
				and g.countries=#{countries}
			</if>
			<if test="	gartenId!=null and gartenId!=''" >
				and g.gartenId=#{gartenId}
			</if>
		and b.gartenId=g.gartenId
		and b.isvalid=0 and g.isvalid=0
	</select>
	
	<select id="adddetailWorker"  resultType="AddDetail">
		SELECT
	g.gartenName gartenName,g.province province,g.city city,g.countries countries,g.address address,'老师' type,w.workerName name,w.registTime registTime
	FROM
		worker＿info w,
		garten_info g
	WHERE
		UNIX_TIMESTAMP(w.registTime) > #{start}-1
			and #{end}+86400>UNIX_TIMESTAMP(w.registTime) 
	and w.gartenId=g.gartenId
	and w.job='老师'
	<if test="	province!=null and province!=''" >
				and g.province=#{province}
			</if>
			<if test="	city!=null and city!=''" >
				and g.city=#{city}
			</if>
			
			<if test="	countries!=null and countries!=''" >
				and g.countries=#{countries}
			</if>
				<if test="	gartenId!=null and gartenId!=''" >
				and g.gartenId=#{gartenId}
			</if>
	and w.isValid=0
	and g.isValid=0
	</select>
	
	<select id="adddetailParent"  resultType="AddDetail">
		SELECT
	g.gartenName gartenName,g.province province,g.city city,g.countries countries,g.address address,'家长' type,p.parentName name,p.registTime registTime
		
		FROM
			parent_info p,
			garten_info g
		WHERE
			UNIX_TIMESTAMP(p.registTime) > #{start}-1
				and #{end}+86400>UNIX_TIMESTAMP(p.registTime) 
		and g.gartenId=substring_index(p.gartenId,',', 1)<!--对家长的幼儿园ID分割取第一个,这里如果是2是取前2个和的意思'1,2'  -->
		
		<if test="	province!=null and province!=''" >
				and g.province=#{province}
			</if>
			
			<if test="	city!=null and city!=''" >
				and g.city=#{city}
			</if>
			
			<if test="	countries!=null and countries!=''" >
				and g.countries=#{countries}
			</if>
				<if test="	gartenId!=null and gartenId!=''" >
				and g.gartenId=#{gartenId}
			</if>
			and p.isValid=0
		and g.isValid=0
	</select>
	
	
	
	
	
	
	<select id="deletedetailBaby"  resultType="AddDetail">
		SELECT
		g.gartenName gartenName,g.province province,g.city city,g.countries countries,g.address address,'宝宝' type,b.babyName name,b.registTime registTime
		FROM
			baby_info b,
			garten_info g
		WHERE
			UNIX_TIMESTAMP(b.registTime) > #{start}-1
			and #{end}+86400>UNIX_TIMESTAMP(b.registTime)
			<if test="	province!=null and province!=''" >
				and g.province=#{province}
			</if>
			<if test="	city!=null and city!=''" >
				and g.city=#{city}
			</if>
			
			<if test="	countries!=null and countries!=''" >
				and g.countries=#{countries}
			</if>
			<if test="	gartenId!=null and gartenId!=''" >
				and g.gartenId=#{gartenId}
			</if>
		and b.gartenId=g.gartenId
		and b.isvalid=1
	</select>
	
	<select id="deletedetailWorker"  resultType="AddDetail">
		SELECT
	g.gartenName gartenName,g.province province,g.city city,g.countries countries,g.address address,'老师' type,w.workerName name,w.registTime registTime
	FROM
		worker＿info w,
		garten_info g
	WHERE
		UNIX_TIMESTAMP(w.registTime) > #{start}-1
		and #{end}+86400>UNIX_TIMESTAMP(w.registTime)
	and w.gartenId=g.gartenId
	<if test="	province!=null and province!=''" >
				and g.province=#{province}
			</if>
			<if test="	city!=null and city!=''" >
				and g.city=#{city}
			</if>
			
			<if test="	countries!=null and countries!=''" >
				and g.countries=#{countries}
			</if>
			<if test="	gartenId!=null and gartenId!=''" >
				and g.gartenId=#{gartenId}
			</if>
	and w.isValid=1
	</select>
	
	<select id="deletedetailParent"  resultType="AddDetail">
		SELECT
	g.gartenName gartenName,g.province province,g.city city,g.countries countries,g.address address,'家长' type,p.parentName name,p.registTime registTime
		
		FROM
			parent_info p,
			garten_info g
		WHERE
			UNIX_TIMESTAMP(p.registTime) > #{start}-1
			and #{end}+86400>UNIX_TIMESTAMP(p.registTime)
		and g.gartenId=substring_index(p.gartenId,',', 1)<!--对家长的幼儿园ID分割取第一个,这里如果是2是取前2个和的意思'1,2'  -->
		
		<if test="	province!=null and province!=''" >
				and g.province=#{province}
			</if>
			
			<if test="	city!=null and city!=''" >
				and g.city=#{city}
			</if>
			
			<if test="	countries!=null and countries!=''" >
				and g.countries=#{countries}
			</if>
			<if test="	gartenId!=null and gartenId!=''" >
				and g.gartenId=#{gartenId}
			</if>
			and p.isValid=1
	</select>
	
	
	
	
	<update id="updatePwdToken"  >
		update   worker＿info w
		set token=#{token},tokenTime=now(),pwd=#{pwd}
		where phoneNumber=#{phoneNumber} 
		and w.job in ('总管理员')
		and w.isValid=0
	</update>
	
	<update id="agreeAgentAudit"  >
		update   agent_audit a
		set state=1
		where auditId=#{auditId} 
		and a.isValid=0
	</update>
	<update id="refuseAgentAudit">
		update agent_audit
		set state=2,reason=#{reason}
		where auditId=#{auditId}
		and isValid=0
	</update>
	<update id="deleteAgentMessge"  >
		update   agent_info i
		set isvalid=1
		where agentId=#{agentId} 
	</update>
	
	<update id="frostAgentMessge"  >
		update   agent_info i
		set frost=1
		where agentId=#{agentId} 
		and i.isvalid=0
	</update>
	
	<update id="unfrostAgentMessge"  >
		update   agent_info i
		set frost=0
		where agentId=#{agentId} 
		and i.isvalid=0
	</update>
	
	<update id="changeGartenDredge"  >
		update   garten_info g
		set g.gartenId=g.gartenId
		<if test="	type==0  " >
			<if test="	count==0 " >
				, g.monitorTime=now()
			</if>
			<if test="	count>0   " >
			,g.monitorTime=date_add((CASE WHEN g.monitorTime &lt; now() THEN now() ELSE g.monitorTime end), interval #{count} month)
			</if>
		</if>
		<if test="	type==1  " >
			<if test="	count==0 " >
				, g.attendanceTime=now()
			</if>
			<if test="	count>0   " >
			,g.attendanceTime=date_add((CASE WHEN g.attendanceTime &lt; now() THEN now() ELSE g.attendanceTime end), interval #{count} month)
			</if>
		</if>
		where g.gartenId=#{gartenId} 
		and g.isvalid=0
	</update>
	
	
	
	<update id="updateAgentMessge"  >
		update   agent_info i
		set agentName=#{agentName},phoneNumber=#{phoneNumber},
		province=#{province},city=#{city},countries=#{countries},cardFragment=#{cardFragment},agentGrade=#{agentGrade},
		creditMoney=#{creditMoney},agentMoney=#{agentMoney},rebate=#{rebate}
		where agentId=#{agentId} 
		and i.isvalid=0
	</update>
	
		<update id="updateGarten"  >
		update   garten_info g
		 
		<set>
			<if test="	gartenName!=null and gartenName!=''" >
				g.gartenName= #{gartenName},
			</if>
			<if test="	name!=null and name!=''" >
				g.name=#{name},
			</if>
			<if test="	phoneNumber!=null and phoneNumber!=''" >
				g.phoneNumber=#{phoneNumber},
			</if>
			<if test="	contractNumber!=null and contractNumber!=''" >
				g.contractNumber=#{contractNumber},
			</if>
			<if test="	contractStart!=null and contractStart!=''" >
				g.contractStart=FROM_UNIXTIME(#{contractStart},  '%Y-%m-%d %H:%i:%s'),
			</if>
			<if test="	contractEnd!=null and contractEnd!=''" >
				g.contractEnd=FROM_UNIXTIME(#{contractEnd},  '%Y-%m-%d %H:%i:%s'),
			</if>
			<if test="	province!=null and province!=''" >
				g.province=#{province},
			</if>
			<if test="	city!=null and city!=''" >
				g.city=#{city},
			</if>
			<if test="	countries!=null and countries!=''" >
				g.countries=#{countries},
			</if>
			<if test="	address!=null and address!=''" >
				g.address=#{address},
			</if>
			<if test="	accountState!=null " >
				g.accountState=#{accountState},
			</if>
			<if test="	charge!=null and charge!=''" >
				g.charge=#{charge},
			</if>
			<if test="	attendanceTime!=null and attendanceTime!=''" >
				g.attendanceTime=FROM_UNIXTIME(#{attendanceTime},  '%Y-%m-%d %H:%i:%s'),
			</if>
			<if test="	monitorTime!=null and monitorTime!=''" >
				g.monitorTime=FROM_UNIXTIME(#{monitorTime},  '%Y-%m-%d %H:%i:%s'),
			</if>
			<if test="	accountState!=null and accountState!=''" >
				g.accountState=#{accountState},
			</if>
			<if test="  agent!=null and agentId!=''  ">
				g.agent=#{agent},
			</if>
			<if test="  agentType!=null and agentType!='' or agentType==0 ">
				g.agentType=#{agentType}
			</if>
		</set>		
		where g.gartenId=#{gartenId} 
		and g.isValid=0
	</update>
	
	
	
	
	
	
	<insert id="addGartenCharge"  >
		insert into garten_charge 
		set type=#{type},province=#{province},
		city=#{city},countries=#{countries},gartenId=#{gartenId},month1=#{month1}
		,month3=#{month3},month6=#{month6},month12=#{month12},gartenName=#{gartenName}
	</insert>
	
	<delete id="deleteGartenCharge"  >
		delete from  garten_charge 
		where chargeId=#{chargeId}
	</delete>
	
	
	<insert id="insertInfoLog"  >
		insert into info_log 
		set gartenId=#{gartenId},info=#{info},job=#{job},id=#{id},
		title=#{title},type=#{type}
	</insert>
	
	
		<insert id="insertGartenInfo" useGeneratedKeys="true" keyProperty="gartenId" parameterType="GartenInfo">
		insert into garten_info 
		set  phoneNumber=#{phoneNumber}, 
		gartenGrade=#{gartenGrade}, 
		 gartenName=#{gartenName}, 
		 address=#{address}, 
		 pwd=#{pwd},
		 attendanceTime=FROM_UNIXTIME(#{attendanceTime},  '%Y-%m-%d %H:%i:%s'), 
		 monitorTime=FROM_UNIXTIME(#{monitorTime},  '%Y-%m-%d %H:%i:%s'), 
		 charge=#{charge}, 
		  agent=#{agent}, 
		 province=#{province}, 
		 city=#{city}, 
		  countries=#{countries}, 
		 contractNumber=#{contractNumber}, 
		 contractStart=FROM_UNIXTIME(#{contractStart},  '%Y-%m-%d %H:%i:%s'), 
		 contractEnd=FROM_UNIXTIME(#{contractEnd},  '%Y-%m-%d %H:%i:%s'), 
		  name=#{name},
		  token=#{token},
		  agentType=#{agentType},
		  gartenType=#{gartenType}
		  
	</insert>
	
	<insert id="insertWorkerInfo"  >
		insert into worker＿info 
		set  gartenId=#{gartenId},
		pwd=#{pwd},
		workerName=#{name},
		phoneNumber=#{phoneNumber},
		education=#{education},
		certificate=#{certificate},
		chinese=#{chinese},
		job=#{job},
		workerId=#{jobId},
		jobcall=#{jobcall},
		token=#{token},
		permission=#{permission}
	</insert>
	
	
	<insert id="insertClass"  >
		insert into garten_class 
		set  leadClass=#{leadClass},
		leadGrade=#{leadGrade},
		gartenId=#{gartenId}
	</insert>
	
	<delete id="deleteClass"  >
		delete from  garten_class 
		where  leadClass=#{leadClass},
		leadGrade=#{leadGrade},
		gartenId=#{gartenId}
	</delete>
	
	<insert id="insertAttendanceNo"  >
		insert into attendance_no  
		set  job=#{job},gartenId=#{gartenId}
	</insert>
	
	<insert id="insertIgnore"  >
		insert into ignore_time  
		set  gartenId=#{gartenId},time=#{date}
	</insert>
	
	<delete id="deleteIgnore"  >
		delete from  ignore_time  
		where   time=FROM_UNIXTIME(#{date},  '%Y-%m-%d %H:%i:%s')
		and gartenId=#{gartenId}
	</delete>
	
	
	<update id="updateGartenTime"  >
		update  garten_info  
		set  attendanceTime=FROM_UNIXTIME(#{attendanceTime},  '%Y-%m-%d %H:%i:%s'), 
		monitorTime=FROM_UNIXTIME(#{monitorTime},  '%Y-%m-%d %H:%i:%s')
		where gartenId=#{gartenId} and isvalid=0

	</update>
	
	
	<insert id="insertAgent"  >
		insert into agent_info  
		set 
		phoneNumber=#{phoneNumber},
		pwd=#{pwd},
		agentGrade=#{agentGrade},
		agentMoney=#{agentMoney},
		creditMoney=#{creditMoney},
		agentStartTime=FROM_UNIXTIME(#{agentStartTime},  '%Y-%m-%d %H:%i:%s'), 
		agentEndTime=FROM_UNIXTIME(#{agentEndTime},  '%Y-%m-%d %H:%i:%s'), 
		name=#{name},
		agentName=#{agentName},
		rebate=#{rebate},
		province=#{province},
		city=#{city},
		countries=#{countries},
		token=#{token}
		
	</insert>
	
		<select id="getMachine" resultType="MachineDetail">
		select p.partnerId,p.partnerSecret,am.type,am.machineId,g.gartenName,am.macId
		from garten_info g,attendance_machine am,partner_info p
		where
		g.gartenId=am.gartenId
		and p.gartenId=am.gartenId 
		and am.isValid=0  and g.isValid=0
		and p.machineId=am.machineId
		<if test=" type!=null and type!=''">
			and am.type=#{type}
		</if>
		<if test=" province!=null and province!=''">
			and g.province=#{province}
		</if>
		<if test=" city!=null and city!=''">
			and g.city=#{city}
		</if>
		<if test=" countries!=null and countries!=''">
			and g.countries=#{countries}		
		</if>
		<if test=" gartenId!=null and gartenId!=''">
			and g.gartenId=#{gartenId}
		</if>
	</select>
	
	<insert id="addMachine">
		insert into attendance_machine(gartenId,macId,type)
		values(#{gartenId},#{macId},#{type})
	</insert>
	
	<update id="updateMachine">
		update attendance_machine set
		macId=#{macId}
		where machineId=#{machineId}
	</update>
	<select id="findMachineById" resultType="MachineDetail">
		select * from attendance_machine
		where machineId=#{machineId} and isValid=0
	</select>
	<update id="updateEquipMac">
		update equipment set macId=#{macId}
		where macId=#{oldMacId}
	</update>
	<update id="deleteMachine">
		update attendance_machine set
		isValid=1
		where machineId=#{machineId}
	</update>
	<update id="updateEquipIsValid">
		update equipment set
		isValid=1 
		where macId=#{oldMacId}
	</update>
	
	<select id="findEquipBygartenId" resultType="DakaCamera">
    	select g.gartenName,e.deviceSerial,e.validateCode,e.type,
    	e.macId,e.cameraIp,e.cameraPort,e.cameraUser,e.cameraPwd,e.cameraId
    	from
    	equipment e,garten_info g
    	where
    	e.isValid=0 and e.macId is not null
    	and e.gartenId=g.gartenId
    	<if test=" province!=null and province!=''">
			and g.province=#{province}
		</if>
		<if test=" city!=null and city!=''">
			and g.city=#{city}
		</if>
		<if test=" countries!=null and countries!=''">
			and g.countries=#{countries}		
		</if>
		<if test=" gartenId!=null and gartenId!=''">
			and g.gartenId=#{gartenId}
		</if>
    </select>
    
    <resultMap type="LiveCamera" id="LiveCameraMap">
    	<id property="cameraId" column="cameraId"/>
    	<result property="gartenName" column="gartenName"/>
    	<result property="deviceSerial" column="deviceSerial"/>
    	<result property="validateCode" column="validateCode"/>
    	<result property="type" column="gvType"/>
    	<result property="gartenId" column="gartenId"/>
    	<result property="cameraIp" column="cameraIp"/>
		<result property="cameraPort" column="cameraPort"/>    	
    	<result property="cameraUser" column="cameraUser"/>
    	<result property="cameraPwd" column="cameraPwd"/>
    	<result property="url" column="url"/>
    	<result property="img" column="img"/>
    	<result property="pointId" column="pointId"/>
    	<association property="gartenClass" javaType="GartenClass" >
    		<id property="classId" column="classId"/>
    		<result property="gradeId" column="gradeId"/>
    		<result property="leadClass" column="leadClass"/>
    		<result property="leadGrade" column="leadGrade"/>
    	</association>
    </resultMap>
    
    <select id="findVideoByGartenId" resultMap="LiveCameraMap">
    	select 
    	gv.gartenId,g.gartenName,e.deviceSerial,e.validateCode,gv.url,e.cameraUser,e.cameraPwd,
    	e.cameraIp,e.cameraPort,e.cameraId,gv.type gvType,gv.pointId,gv.img,gc.*
    	from
    	garten_video gv
    	left join garten_class gc on gc.classId=gv.pointId
    	join equipment e   on gv.cameraId=e.cameraId 
	    join garten_info g on gv.gartenId=g.gartenId
	    
    	and  
    	e.isValid=0 and e.macId is null
    	<if test=" province!=null and province!=''">
			and g.province=#{province}
		</if>
		<if test=" city!=null and city!=''">
			and g.city=#{city}
		</if>
		<if test=" countries!=null and countries!=''">
			and g.countries=#{countries}		
		</if>
		<if test=" gartenId!=null and gartenId!=''">
			and gv.gartenId=#{gartenId}
		</if>
		group by e.cameraId
    </select>
    
    <insert id="addDakaCamera" useGeneratedKeys="true" keyProperty="cameraId" parameterType="Equipment">
    	insert into equipment(gartenId,cameraIp,cameraPort,cameraPwd,
    		cameraUser,type,macId,deviceSerial,validateCode)
    	values(#{gartenId},#{cameraIp},#{cameraPort},#{cameraPwd},
    		#{cameraUser},#{type},#{macId},#{deviceSerial},#{validateCode})
    </insert>
    
    <select id="getDeviceSerialById" resultType="string">
    	select deviceSerial from equipment
    	where cameraId=#{cameraId}
    </select>
    
    <update id="deleteDakaCamera">
    	update equipment set
    	isValid=1
    	where cameraId=#{cameraId}
    </update>
    <update id="updateDakaCamera">
    	update equipment set
    	cameraPort=#{cameraPort}, type=#{type}, macId=#{macId},
    	cameraUser=#{cameraUser}, cameraPwd=#{cameraPwd},cameraIp=#{cameraIp}
    	where
    	cameraId=#{cameraId}
    </update>
    
    <insert id="addLiveCamera">
    	insert into
    	 equipment(gartenId,cameraIp,cameraPort,cameraUser,
    		cameraPwd,deviceSerial,validateCode)
    	values(#{gartenId},#{cameraIp},#{cameraPort},#{cameraUser},
    		#{cameraPwd},#{deviceSerial},#{validateCode})
    </insert>
    
    <insert id="addLiveGartenVideo">
    	insert into garten_video(type,gartenId,pointId,time,url,img,cameraId)
    	values(#{type},#{gartenId},#{pointId},now(),#{url},#{img},
    	(select cameraId from equipment where deviceSerial=#{deviceSerial} and isValid=0))
    </insert>
    <update id="deleteLiveCamera">
    	update equipment set
    	isValid=1 where cameraId=#{cameraId}
    </update>
    <update id="deleteGartenVideo">
    	update garten_video set
    	isValid=1 where cameraId=#{cameraId}
    </update>
    <update id="updateLiveCamera">
    	update equipment set
    	cameraPort=#{cameraPort},cameraUser=#{cameraUser},cameraPwd=#{cameraPwd},
    	cameraIp=#{cameraIp}
    	where
    	cameraId=#{cameraId}
    </update>
    <update id="updateLiveVideo">
    	update garten_video set
    	type=#{type},pointId=#{pointId},img=#{img},url=#{url}
    	where
    	cameraId=#{cameraId}
    </update>
    <update id="updateAgentFinance">
    	update agent_info 
    	set
    	creditMoney=#{creditMoney},agentMoney=#{agentMoney},rebate=#{rebate}
    	where
    	agentId=#{agentId}
    </update>
    <insert id="addPartner">
    	insert into partner_info(partnerID,partnerSecret,tokenTime,tokenExpireTime,gartenId,machineId)
    	values(#{partnerID},#{partnerSecret},UNIX_TIMESTAMP(now()),UNIX_TIMESTAMP(now())+2592000,#{gartenId},#{machineId})
    </insert>
    <select id="findEquipmentByDeviceSerial" resultType="Equipment">
    	select * from equipment
    	where deviceSerial=#{deviceSerial} and isValid=0
    </select>
    <select id="findMaxMachineId" resultType="Integer">
		select max(machineId) from attendance_machine where isvalid=0;  	
    </select>
    <delete id="deletePartner">
    	delete  from partner_info
    	where machineId=#{machineId}
    </delete>
    <update id="updateAgentCredits"  >
		update   agent_info  
		set creditMoney=creditMoney+#{price}
		where   agentId=#{agentId}
	</update>
	<update id="deleteOrderNoPay">
		update torder set
		isValid=1
		where state=0
	</update>
	
	<select id="relation"  resultType="Relation">
		SELECT * FROM parent_relation  w
	</select>
	
	<insert id="addrelation" useGeneratedKeys="true" keyProperty="relationId" parameterType="Relation">
		insert  into  parent_relation  set relation=#{relation}
	</insert>
	
	
	<delete id="deleterelation"  >
		delete  FROM parent_relation  where relationId=#{relationId}
	</delete>
	
	<update id="deleteGartenActivityDetail">
		update activity_detail set 
		isValid=1 where gartenId=#{gartenId}
	</update>
	<update id="deleteGartenAllCharge">
		update garten_charge set 
		isValid=1 where gartenId=#{gartenId}
	</update>
	<update id="deleteGartenAllClass">
		update garten_class set 
		isValid=1 where gartenId=#{gartenId}
	</update>
	<update id="deleteGartenInfo">
		update garten_info set 
		isValid=1 where gartenId=#{gartenId}
	</update>
	<update id="deleteGartenAllLesson">
		update garten_lesson set 
		isValid=1 where gartenId=#{gartenId}
	</update>
	<update id="deleteGartenAllPhoto">
		update garten_photos set 
		isValid=1 where gartenId=#{gartenId}
	</update>
	<update id="deleteGartenAllRecipe">
		update garten_recipe set 
		isValid=1 where gartenId=#{gartenId}
	</update>
	<update id="deleteGartenAllVideo">
		update garten_video set 
		isValid=1 where gartenId=#{gartenId}
	</update>
	<update id="deleteGartenAllIgnoreTime">
		update ignore_time set 
		isValid=1 where gartenId=#{gartenId}
	</update>
	<update id="deleteGartenAllInfoLog">
		update info_log set 
		isValid=1 where gartenId=#{gartenId}
	</update>
	<update id="deleteGartenAllUnusual">
		update unusual set 
		isValid=1 where gartenId=#{gartenId}
	</update>
	<update id="deleteGartenAllMachine">
		update attendance_machine set 
		isValid=1 where gartenId=#{gartenId}
	</update>
	<update id="deleteGartenAllEquipment">
		update equipment set 
		isValid=1 where gartenId=#{gartenId}
	</update>
	<delete id="deleteIsvalid"  >
		delete  from  activity_detail  where isvalid=1;
		delete  from  activity_log  where isvalid=1;
		delete  from  agent_audit  where isvalid=1;
		delete  from  agent_info  where isvalid=1;
		delete  from  agent_visit  where isvalid=1;
		delete  from  attendance_machine  where isvalid=1;
		delete  from  attendance_no  where isvalid=1;
		delete  from  baby_check_log  where isvalid=1;
		delete  from  baby_info  where isvalid=1;
		delete  from   baby_leave_log   where isvalid=1;
		delete  from  baby_performance_log  where isvalid=1;
		
		delete  from  comment   where isvalid=1;
		delete  from  daijie_info  where isvalid=1;
		delete  from  daka_log  where isvalid=1;
		
		
		delete  from  feedback   where isvalid=1;
		delete  from   garten_charge  where isvalid=1;
		delete  from  garten_class  where isValid=1;
		delete  from  garten_photos  where isvalid=1;
		delete  from  garten_recipe  where isvalid=1;
		delete  from   garten_video  where isvalid=1;
		delete  from  ignore_time  where isvalid=1;
		delete  from   info_log  where isvalid=1;
		delete  from  parent_info  where isvalid=1;
		
		delete  from   photo_dianzan  where isvalid=1;
		delete  from  slideshow  where isvalid=1;
		delete  from  torder  where isvalid=1;
		delete  from  unusual  where isvalid=1;
		delete  from  version  where isvalid=1;
		delete  from   worker_check_log  where isvalid=1;
		delete  from  worker_flower  where isvalid=1;
		delete  from  worker＿info  where isvalid=1;
		delete  from  worker_leave_log  where isvalid=1;
	</delete>
	<update id="deleteMessageLog">
		update message_log set 
		isValid=1
		where messageId=#{messageId}
	</update>
	
	<select id="findEquipmentName"  resultType="EquipmentName">
		SELECT * FROM equipment_name  e
	</select>
	
	<insert id="addEquipmentName"  useGeneratedKeys="true" keyProperty="equipmentId" parameterType="EquipmentName">
		insert into  equipment_name   set
		equipmentName=#{equipmentName},   price=#{price} ,imgUrl=#{imgUrl},remark=#{remark}
	</insert>
	<select id="findEquipmentByName" resultType="EquipmentName">
		select * from equipment_name
		where equipmentName=#{equipmentName}
	</select>
	<delete id="deleteEquipmentName"  >
		delete from   equipment_name   where 
		equipmentId=#{equipmentId}
	</delete>
	<update id="resolveWuliaoOrder"  >
		update   wuliao_order  
		set state=#{state},toPhonenumber=#{toPhoneNumber},remark=#{remark}
		where   wuliaoId=#{wuliaoId}  and isvalid=0
	</update>
	<update id="updateBalance"  >
		update  agent_info  
		set  creditMoney=#{balance}
		where agentId=#{agentId} and isvalid=0
	</update>
	<update id="updateAgentAuditPhone">
		update agent_audit 
		set
		phoneNumber=#{newPhoneNumber}
		where phoneNumber =#{oldPhoneNumber}
	</update>
	<!-- 大改  -->
	<select id="getBabyCardNoList" resultType="CardNoDetail">
		select an.cardNo1,an.cardNo2,an.cardNo3,an.job,an.jobId,b.babyName name
		from attendance_no an,garten_info g,baby_info b
		where
		an.isValid=0
		and an.gartenId=g.gartenId
		and an.job='宝宝' and b.babyId=an.jobId
		<if test=" province!=null and province!=''">
			and g.province=#{province}
		</if>
		<if test=" city!=null and city!=''">
			and g.city=#{city}
		</if>
		<if test=" countries!=null and countries!=''">
			and g.countries=#{countries}		
		</if>
		<if test=" gartenId!=null and gartenId!=''">
			and an.gartenId=#{gartenId}
		</if>
		<if test=" classId!=null and classId!=''">
			and b.classId=#{classId}
		</if>
		group by an.jobId
	</select>
	<select id="getTeacherCardNoList" resultType="CardNoDetail">
		select an.cardNo1,an.cardNo2,an.cardNo3,an.job,an.jobId,w.workerName name
		from
		attendance_no an,worker＿info w,garten_info g
		where
		an.gartenId=g.gartenId
		and an.job='老师' and w.workerId=an.jobId
		<if test=" province!=null and province!=''">
			and g.province=#{province}
		</if>
		<if test=" city!=null and city!=''">
			and g.city=#{city}
		</if>
		<if test=" countries!=null and countries!=''">
			and g.countries=#{countries}		
		</if>
		<if test=" gartenId!=null and gartenId!=''">
			and an.gartenId=#{gartenId}
		</if>
		<if test=" classId!=null and classId!=''">
			and w.classId=#{classId}
		</if>
		group by an.jobId
	</select>
	<select id="findSaleService"  resultType="SaleServiceAll">
		select *  from sale_service  s where s.saleServiceId>#{start}*1000 
			and  #{end}*1000+86400000>s.saleServiceId
			<if test="	agentId!=null and agentId!=''" >
				and s.agentId in (${agentId})
			</if>
			<if test="	state!=null and state!='' " >
				and s.state=#{state}
			</if>
			<if test="	gartenId!=null and gartenId!=''" >
				and s.gartenId in (${gartenId})
			</if>
			order by s.saleServiceId desc
	</select>
	
	<select id="findSaleServiceBySaleServiceId"  resultType="SaleServiceAll">
		select *  from sale_service   where saleServiceId=#{saleServiceId} 
	</select>
	
	<update id="replySaleService"  >
		update    sale_service  set
		reply=#{reply},replyTime=unix_timestamp(now())*1000,state=1
		where saleServiceId=#{saleServiceId}
	</update>
	<delete id="deleteSaleService"  >
		delete from    sale_service  where saleServiceId=#{saleServiceId}
	</delete>
	<select id="findClassById" resultType="GartenClass">
		select * from garten_class
		where classId=#{classId}
	</select>
	<select id="findMachineByMacId" resultType="MachineDetail">
		select * from attendance_machine 
		where
		macId=#{macId} and isValid=0
	</select>
	<select id="findWuliaoOrder" resultType="WuliaoOrder">
		SELECT * FROM wuliao_order
		where isValid=0
		and resource=1
		<if test=" state!=null and state!='' ">
			state=#{state}
		</if>
	</select>

	
	<select id="findEmployee" resultType="Employee">
		SELECT * FROM employee
		where name=name
		<if test=" name!=null and name!='' ">
			and name=#{name}
		</if>
		<if test=" employeeNo!=null and employeeNo!='' ">
			and employeeNo=#{employeeNo}
		</if>
		<if test=" departmentNo!=null and departmentNo!='' ">
			and departmentNo=#{departmentNo}
		</if>
		<if test=" jobsNo!=null and jobsNo!='' ">
			and jobsNo=#{jobsNo}
		</if>
		order by registTime desc
	</select>
	
	<select id="findIfDeleteEmployee" resultType="Boolean">
		select count(*) from agent_audit 
		where
		resource=0 and resourceId=#{employeeNo} and isValid=0
		and (state=0 or state=1)
	</select>
	
	<delete id="deleteEmployee" >
		delete  from employee where employeeNo=#{employeeNo};
		delete  from company_report where employeeNo=#{employeeNo};
		delete  from company_activity where employeeNo=#{employeeNo};
		delete  from wuliao_order where resource=0 and agentId=#{employeeNo};
	</delete>
	
	<update id="updateEmployee" >
		update   employee 
		set
		name=#{name},
		departmentNo=#{departmentNo},
		jobsNo=#{jobsNo},
		permission=#{permission},
		province=#{province},
		city=#{city},
		countries=#{countries},
		phoneNumber=#{phoneNumber},
		pwd=#{pwd},
		sex=#{sex},
		entryTime=FROM_UNIXTIME(#{entryTime},  '%Y-%m-%d %H:%i:%s'),
		lastEmployeeNo=#{lastEmployeeNo}
		
		where employeeNo=#{employeeNo}
	</update>
	
	<insert id="addEmployee" useGeneratedKeys="true" keyProperty="employeeNo" parameterType="Employee"> 
		insert  into employee 
		set
		name=#{name},
		departmentNo=#{departmentNo},
		jobsNo=#{jobsNo},
		permission=#{permission},
		province=#{province},
		city=#{city},
		countries=#{countries},
		phoneNumber=#{phoneNumber},
		pwd=#{pwd},
		token=#{token},
		sex=#{sex},
		entryTime=FROM_UNIXTIME(#{entryTime},  '%Y-%m-%d %H:%i:%s'),
		lastEmployeeNo=#{lastEmployeeNo}
		
	</insert>
	
	<select id="findCpActivity" resultType="CpActivity">
		select * from company_activity 
		where 1=1
		<if test=" state!=null and state!='' ">
			and state=#{state}
		</if>
		<if test=" employeeNo!=null and employeeNo!='' ">
			and employeeNo=#{employeeNo}
		</if>
	</select>
	
	
	
	<update id="updateCpActivity" >
		update   company_activity 
		set state=#{state}
		where
		 cpActivityId=#{cpActivityId}
	</update>
	
	<delete id="deleteCpActivity" >
		delete  from company_activity 
		where
		 cpActivityId=#{cpActivityId}
	</delete>
	
	<insert id="addCpActivity" useGeneratedKeys="true" keyProperty="cpActivityId" parameterType="CpActivity"> 
		insert  into company_activity 
		set
		employeeNo=#{employeeNo},
		content=#{content},
		reason=#{reason},
		title=#{title}
	</insert>
	
	<select id="findEmployeeByToken" resultType="Employee">
		select * from employee 
		where
		token=#{token}
	</select>
	
		<select id="findEmployeeByPwd" resultType="Employee">
		select * from employee 
		where phoneNumber=#{phoneNumber}
		and pwd=#{pwd}
	</select>
	
		<select id="findEmployeeByPhoneNumber" resultType="Employee">
		select * from employee 
		where phoneNumber=#{phoneNumber}
		
	</select>
	
	
	<select id="findDepartmentReport" resultType="ReportAll">
		select * from company_report r 
		left join employee e  on  r.employeeNo=e.employeeNo
		where  #{startTime}-1 &lt; unix_timestamp(r.registTime)
		and  unix_timestamp(r.registTime) &lt;  #{endTime}+86400
		<if test=" departmentNo!=null and departmentNo!='' ">
			and e.departmentNo=#{departmentNo}
		</if>
		order by r.registTime desc

	</select>
	
	<delete id="deleteReport" >
		delete  from company_report 
		where
		reportId=#{reportId}
	</delete>
	
	<insert id="addReport" useGeneratedKeys="true" keyProperty="reportId" parameterType="Report"> 
		insert  into company_report 
		set
		startTime=#{startTime},
		endTime=#{endTime},
		workContent=#{workContent},
		workSummary=#{workSummary},
		harmonizeContent=#{harmonizeContent},
		plan=#{plan},
		employeeNo=#{employeeNo},
		type=#{type}

	</insert>
	
	<select id="findMyApplyGarten" resultType="AgentAudit">
		
		select * from agent_audit 
		where resource=0 and resourceId=#{employeeNo}
		order by registTime desc
		
	</select>
	
	<select id="findEmployeeById" resultType="Employee">
		select * from employee
		where employeeNo=#{employeeNo}
	</select>
	
	<select id="findDepartment" resultType="Department">
		select * from department  order by departmentNo desc
	</select>
	
	<select id="findDepartmentByEmployeeNo" resultType="Department">
		select * from department d left join employee e on e.departmentNo=d.departmentNo
		where e.employeeNo=#{employeeNo}
	</select>
	
	<delete id="deleteDepartment" >
		delete  from department  where  departmentNo=#{departmentNo}
	</delete>
	
	<insert id="addDepartment" useGeneratedKeys="true" keyProperty="departmentNo" parameterType="Department"> 
		insert  into department  set
		departmentNo=unix_timestamp(now()),
		departmentName=#{departmentName},
		mark=#{mark}
	</insert>
	<delete id="deleteJobs">
		delete from jobs where jobsNo=#{jobsNo}
	</delete>
	<select id="ifExistDepartment" resultType="Boolean">
		select count(1) from department  where departmentName=#{departmentName}
	</select>
	
	<select id="ifExistJobs" resultType="Boolean">
		select count(1) from jobs  where jobsName=#{jobsName}
	</select>
	
	
	<select id="ifExistDepartmentEmployee" resultType="Integer">
		select count(1) from department  d
		 join employee e on d.departmentNo=e.departmentNo 
		 where d.departmentNo=#{departmentNo}
	</select>
	
	<select id="ifExistJobsEmployee" resultType="Integer">
		select count(1) from jobs  j
		 join employee e on j.jobsNo=e.jobsNo 
		 where j.jobsNo=#{jobsNo}
	</select>
	
	
	<select id="findJobs" resultType="Jobs">
		select * from jobs  j order by jobsNo desc
	</select>
	
	<select id="findJobsByEmployeeNo" resultType="Jobs">
		select * from jobs  j left join employee e on e.jobsNo=j.jobsNo
		where e.employeeNo=#{employeeNo}
	</select>
	
	<insert id="addJobs" useGeneratedKeys="true" keyProperty="jobsNo" parameterType="Jobs">
		insert into jobs  set
		jobsNo=unix_timestamp(now()),
		jobsName=#{jobsName},
		mark=#{mark}
	</insert>
	<select id="findDepartmentCpActivity" resultType="CpActivity">
		select * from company_activity  a 
		left join employee e on a.employeeNo=e.employeeNo
		where e.departmentNo=#{departmentNo}
		<if test=" state!=null and state!='' ">
			and state=#{state}
		</if>
	</select>
	<select id="findToken" resultType="string"> 
		select  token from  employee e
		where phoneNumber=#{phoneNumber} 
	</select>
	<select id="findMyReport" resultType="Report">
		select * from company_report r 
		left join employee e  on  r.employeeNo=e.employeeNo
		where  #{startTime}-1 &lt; unix_timestamp(r.registTime)
		and  unix_timestamp(r.registTime) &lt;  #{endTime}+86400
		and e.employeeNo=#{employeeNo}
		order by r.registTime desc
	</select>
	<select id="findWithdraw" resultType="WithdrawAll">
		select * from agent_withdraw   
		where  #{startTime}-1 &lt; unix_timestamp(registTime)
		and  unix_timestamp(registTime) &lt;  #{endTime}+86400
		<if test=" state!=null ">
			and state=#{state}
		</if>
		order by registTime desc
	</select>
	
	
	<update id="updateWithdraw" >
		update   agent_withdraw   
		set state=#{state},mark=#{mark},employeeNo=#{employeeNo}
		where  withdrawId=#{withdrawId}
	</update>
	
	
	<delete id="deleteWithdraw" >
		delete from    agent_withdraw    where  withdrawId=#{withdrawId}
	</delete>
	<select id="findAgentOrder" resultType="AgentOrderAll">
		select * from agent_order   
		where  #{startTime}-1 &lt; orderNumber/1000
		and  orderNumber/1000 &lt;  #{endTime}+86400
		<if test=" state!=null ">
			and state=#{state}
		</if>
		<if test=" agentId!=null ">
			and agentId=#{agentId}
		</if>
	</select>
	<select id="findDepartmentWuliaoOrder" resultType="WuliaoOrder">
		select * from wuliao_order
		where 
		resource=0
		and isvalid=0
		<if test=" state!=null and state!='' ">
			and state=#{state}
		</if>
		and FIND_IN_SET(agentId,#{departmentIds})
		
	</select>

	
	<insert id="addCard" parameterType="java.util.List">
		insert into card(inCard,outCard,agentId,agentType,returnMoney)
		values
		<foreach collection="list" item="item" index="index" separator=",">
			(#{item.inCard},#{item.outCard},#{item.agentId},#{item.agentType},#{item.returnMoney})
		</foreach>
	</insert>
	
	<select id="findCardCount" resultType="Integer">
		select count(*) from card
		where 
		id=id
		<if test=" agentId!=null and agentId!='' ">
			and agentId=#{agentId}
		</if>
		<if test=" agentType!=null and agentType!='' or agentType=0 ">
			and agentType=#{agentType}
		</if>
		<if test=" gartenId!=gartenId and gartenId!='' ">
			and gartenId=#{gartenId}
		</if>
	</select>
	
	<select id="findCard" resultType="Card">
		select * from card
		where 
		id=id
		<if test=" agentId!=null and agentId!='' ">
			and agentId=#{agentId}
		</if>
		<if test=" agentType!=null and agentType!='' or agentType=0 ">
			and agentType=#{agentType}
		</if>
		<if test=" gartenId!=gartenId and gartenId!='' ">
			and gartenId=#{gartenId}
		</if>
	</select>
	
	<insert id="addGartentype" useGeneratedKeys="true" keyProperty="gartenType" parameterType="GartenType">
		insert into    garten_type    set
		typeName=#{typeName},
		operator=#{operator},
		mark=#{mark}
	</insert>
	
	
	<delete id="deleteGartentype" >
		delete from    garten_type    where  gartenType=#{gartenType}
	</delete>
	
	<select id="findGartentype" resultType="GartenType">
		select  * from    garten_type   order by registTime desc
	</select>
	
	<update id="updateAttendanceNoAll" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open="" close="" separator=";" >
			update attendance_no 
			<set>
				cardNo1=cardNo1
				<if test=" item.cardNo1!=null and item.cardNo1!=''">
					,cardNo1=${item.cardNo1}
				</if>
				<if test=" item.cardNo2!=null and item.cardNo2!='' ">
					,cardNo2=${item.cardNo2}
				</if>
				<if test=" item.cardNo3!=null and item.cardNo3!=''">
					,cardNo3=${item.cardNo3}
				</if>
			</set>
			where jobId=${item.jobId}
		</foreach>
	</update>
	<select id="findCardById" resultType="Card">
		select * from card
		where id=#{cardId}
	</select>
	<delete id="deleteCard">
		delete from card 
		where id=#{cardId}
	</delete>
	<insert id="addcardReturn">
		insert into card_return 
		set
		cardId=#{cardId},outCard=#{outCard},returnMoney=#{returnMoney},name=#{name}
	</insert>
	<select id="findCardReturn" resultType="CardReturn">
		select * from card_return 
		where 
		returnId=returnId
		<if test=" name!=null and name!='' ">
			and name=#{name}
		</if>
		and UNIX_TIMESTAMP(returnTime) &lt; #{endTime}+86400
		and UNIX_TIMESTAMP(returnTime) &gt; #{startTime}-1
	</select>
	<delete id="deleteCardReturn">
		delete from card_return
		where returnId=#{returnId}
	</delete>
	<select id="findAgentMessage" resultType="AgentMessageAll">
		select  * from    agent_message  where
		#{startTime}-1 &lt; unix_timestamp(registTime)
		and unix_timestamp(registTime) &lt; #{endTime}+86400
		<if test=" agentId!=null  and agentId!='' ">
			and agentId=#{agentId}
		</if>
		<if test="  state!=null  and state!='' ">
			and isread=#{state}
		</if>
		 order by registTime desc
	</select>
	
	<delete id="deleteAgentMessage" >
		delete from    agent_message    where  agentMessageId=#{agentMessageId}
	</delete>
	<insert id="addAgentMessage" >
		insert into    agent_message    set  
		title=#{title},
		message=#{agentMessage},
		employeeNo=#{employeeNo},
		agentId=#{agentId}
		
	</insert>
	<select id="findAttendanceNoByInCard" resultType="AttendanceNo">
		select * from attendance_no
		where cardNo1=#{inCard} or cardNo2=#{inCard} or cardNo3=#{inCard}
	</select>
	<delete id="deleteYichangLog">
		delete from unusual
		where 
		#{startTime}-1 &lt; unix_timestamp(unusualTime)
		and unix_timestamp(unusualTime) &lt; #{endTime}+86400
		and (state=0 or state=2)
		<if test=" gartenIds!=null and gartenIds!='' ">
			and find_in_set(gartenId,#{gartenIds})
		</if>
		<if test=" identity!=null and identity!='' ">
			and job=#{identity}
		</if>
		
	</delete>
	<update id="readAgentMessage" >
		update     agent_message    set  
		isread=1 where agentMessageId=#{agentMessageId}
	</update>
	<insert id="addGartenAttendance">
		insert into garten_attendance
		set gartenId=#{gartenId}
	</insert>
	<delete id="removeRepetitionCard">
		delete from 
			card 
		where id not in (select minid from (select min(id) as minid from card group by outCard) b);
	</delete>
	<insert id="insertOperateLog" >
		insert into    operate_log    set  
		fromName=#{fromName},
		toName=#{toName},
		fromId=#{fromId},
		toId=#{toId},
		toJob=#{toJob},
		type=#{type},
		content=#{content}
	</insert>
	<select id="findChargeById" resultType="GartenCharge">
		select * from garten_charge
		where chargeId=#{chargeId} and isvalid=0
	</select>
	<select id="findEquipmentById" resultType="Equipment">
		select * from equipment
		where cameraId=#{cameraId} and isvalid=0
	</select>
	<select id="findParentRelationById" resultType="Relation">
		select * from parent_relation
		where relationId=#{relationId}
	</select>
	<select id="findMessageLogById" resultType="MessageLog">
		select * from message_log
		where messageId=#{messageId} 
	</select>
	<select id="findEquipmentNameById" resultType="EquipmentName">
		select * from equipment_name 
		where equipmentId=#{equipmentId}
	</select>
	<select id="findcpActivityById" resultType="CpActivity">
		select * from company_activity
		where cpActivityId=#{cpActivityId}
	</select>
	<select id="findDepartMentById">
		select * from department
		where departmentNo=#{departmentNo}
	</select>
	<select id="findJobsById">
		select * from jobs
		where jobsNo=#{jobsNo}
	</select>
	<select id="findGartenTypeById" resultType="GartenType">
		select * from garten_type
		where gartenType=#{gartenType}
	</select>
	
	<select id="findOperateLog" resultType="OperateLog">
		select  * from    operate_log  where
		#{startTime}-1 &lt; unix_timestamp(registTime)
		and unix_timestamp(registTime) &lt; #{endTime}+86400
		<if test=" type!=null  and type!='' ">
			and type=#{type}-1
		</if>
		<if test="  fromName!=null  and fromName!='' ">
			and fromName=#{fromName}
		</if>
		<if test="  toName!=null  and toName!='' ">
			and toName=#{toName}
		</if>
		<if test="  content!=null  and content!='' ">
			and content like '%${content}%'
		</if>
		 order by registTime desc
	</select>
	<update id="updateEquipMentName">
		update equipment_name
		set equipmentName=#{equipmentName},price=#{price},remark=#{remark},
		imgUrl=#{imgUrl}
		where equipmentId=#{equipmentId}
	</update>
</mapper> 